{
  "name": "Fibonacci",
  "version": "0.1",
  "description": "Hand written fibonacci component",
  "instances": [
    {
      "n_bits": 5,
      "generation_graph": [
        {
          "name": "f",
          "description": "Fibonacci values",
          "size": 32,
          "ty": "M31",
          "op": "concat",
          "params": [],
          "inputs": [
            "one",
            "secret",
            "f_rec"
          ]
        },
        {
          "name": "one",
          "description": "One value",
          "size": 1,
          "ty": "M31",
          "op": "constant",
          "params": [
            {
              "Int": 1
            }
          ],
          "inputs": []
        },
        {
          "name": "secret",
          "description": "Secret value",
          "size": 1,
          "ty": "M31",
          "op": "generation_input",
          "params": [
            {
              "String": "secret"
            }
          ],
          "inputs": []
        },
        {
          "name": "f_rec",
          "description": "f[:2]**2 + f[1:-1]**2",
          "size": 30,
          "ty": "M31",
          "op": "add",
          "params": [],
          "inputs": [
            "f0sq",
            "f1sq"
          ]
        },
        {
          "name": "f0sq",
          "description": "f[:2]**2",
          "size": 30,
          "ty": "M31",
          "op": "mul",
          "params": [],
          "inputs": [
            "f0",
            "f0"
          ]
        },
        {
          "name": "f1sq",
          "description": "f[1:-1]**2",
          "size": 30,
          "ty": "M31",
          "op": "mul",
          "params": [],
          "inputs": [
            "f1",
            "f1"
          ]
        },
        {
          "name": "f0",
          "description": "f[:-2]",
          "size": 30,
          "ty": "M31",
          "op": "slice",
          "params": [
            {
              "Int": 0
            },
            {
              "Int": 30
            },
            {
              "Int": 1
            }
          ],
          "inputs": [
            "f"
          ]
        },
        {
          "name": "f1",
          "description": "f[1:-1]",
          "size": 30,
          "ty": "M31",
          "op": "slice",
          "params": [
            {
              "Int": 1
            },
            {
              "Int": 30
            },
            {
              "Int": 1
            }
          ],
          "inputs": [
            "f"
          ]
        }
      ],
      "columns": [
        {
          "name": "f",
          "description": "Fibonacci values",
          "generation_node": "f",
          "kind": "Witness"
        }
      ],
      "outputs": [],
      "constraint_graph": [
        {
          "name": "initial_1",
          "description": "Check that the first fibonacci value is 1",
          "size": 1,
          "ty": "M31",
          "op": "sub",
          "params": [],
          "inputs": [
            "f0",
            "one"
          ]
        },
        {
          "name": "one",
          "description": "One value",
          "size": 1,
          "ty": "M31",
          "op": "constant",
          "params": [
            {
              "Int": 1
            }
          ],
          "inputs": []
        },
        {
          "name": "f",
          "description": "Fibonacci values",
          "size": 32,
          "ty": "M31",
          "op": "commited_column",
          "params": [
            {
              "String": "f"
            }
          ],
          "inputs": []
        },
        {
          "name": "f0",
          "description": "f[0]",
          "size": 1,
          "ty": "M31",
          "op": "slice",
          "params": [
            {
              "Int": 0
            },
            {
              "Int": 1
            },
            {
              "Int": 1
            }
          ],
          "inputs": [
            "f"
          ]
        },
        {
          "name": "claim",
          "description": "f[claim_index] - claim",
          "size": 1,
          "ty": "M31",
          "op": "sub",
          "params": [],
          "inputs": [
            "f_at_claim_index",
            "claim"
          ]
        },
        {
          "name": "f_at_claim_index",
          "description": "f[claim_index]",
          "size": 1,
          "ty": "M31",
          "op": "slice",
          "params": [
            {
              "String": "claim_index"
            },
            {
              "Int": 1
            },
            {
              "Int": 1
            }
          ],
          "inputs": [
            "f"
          ]
        },
        {
          "name": "claim_index",
          "description": "Claim index",
          "size": 1,
          "ty": "u64",
          "op": "public_input",
          "params": [
            {
              "String": "claim_index"
            }
          ],
          "inputs": []
        },
        {
          "name": "step",
          "description": "f[2:]**2 - f[1:-1]**2 - f[:-2]",
          "size": 30,
          "ty": "M31",
          "op": "sub",
          "params": [],
          "inputs": [
            "f2",
            "f_rec"
          ]
        },
        {
          "name": "f2",
          "description": "f[2:]",
          "size": 30,
          "ty": "M31",
          "op": "slice",
          "params": [
            {
              "Int": 2
            },
            {
              "Int": 30
            },
            {
              "Int": 1
            }
          ],
          "inputs": [
            "f"
          ]
        },
        {
          "name": "f_rec",
          "description": "f[1:-1]**2 + f[:-2]",
          "size": 30,
          "ty": "M31",
          "op": "add",
          "params": [],
          "inputs": [
            "f0sq",
            "f1sq"
          ]
        },
        {
          "name": "f0sq",
          "description": "f[:-2]**2",
          "size": 30,
          "ty": "M31",
          "op": "mul",
          "params": [],
          "inputs": [
            "f0",
            "f0"
          ]
        },
        {
          "name": "f1sq",
          "description": "f[1:-1]**2",
          "size": 30,
          "ty": "M31",
          "op": "mul",
          "params": [],
          "inputs": [
            "f1",
            "f1"
          ]
        },
        {
          "name": "f0",
          "description": "f[:-2]",
          "size": 30,
          "ty": "M31",
          "op": "slice",
          "params": [
            {
              "Int": 0
            },
            {
              "Int": 30
            },
            {
              "Int": 1
            }
          ],
          "inputs": [
            "f"
          ]
        },
        {
          "name": "f1",
          "description": "f[1:-1]",
          "size": 30,
          "ty": "M31",
          "op": "slice",
          "params": [
            {
              "Int": 1
            },
            {
              "Int": 30
            },
            {
              "Int": 1
            }
          ],
          "inputs": [
            "f"
          ]
        }
      ],
      "constraints": [
        {
          "name": "initial_1",
          "description": "Check that the first fibonacci value is 1",
          "constraint_node": "initial_1"
        },
        {
          "name": "step",
          "description": "Check that the next fibonacci value is the sum of the previous two.",
          "constraint_node": "step"
        },
        {
          "name": "claim",
          "description": "Check that the claim matches the values at the specified mask.",
          "constraint_node": "claim"
        }
      ],
      "interaction_elements": []
    }
  ]
}
